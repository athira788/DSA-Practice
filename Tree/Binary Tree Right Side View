Probelm : Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

Example 1:
Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

Solution: We will use BFS. For each level we will add the last node to result by checking if the interation index with current size of the queue. The index will point 
atthe last element/nodes in the queue at that level. Time - O(n) and space - O(n)
from collections import deque
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        if(not root):
            return []
        queue = deque([root])
        res = []
        while(queue):
            lvl  = len(queue)
            for i in range(lvl):
                node = queue.popleft()
                if(i == lvl-1):
                    res.append(node.val)
                if(node.left):
                    queue.append(node.left)
                if(node.right):
                    queue.append(node.right)
        return res


        
