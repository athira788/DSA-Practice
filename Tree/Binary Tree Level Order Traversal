Solution: This is more of a BFS problem(iterative using queue) as we traverse level by level. But DFs gives us a elegant code (recursive using stack). 
      Time  Space
BFS   O(n)   O(n)
DFS   O(n)   O(h+n)

Using DFS

class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        res = []
        def dfs(node,lvl):
            if(not node):
                return
            if(lvl == len(res)):
                res.append([])
            res[lvl].append(node.val)
            dfs(node.left, lvl+1)
            dfs(node.right, lvl+1)
        dfs(root,0)
        return res
                

Using BFS

from collections import deque
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if(not root):
            return []
        res = []
        queue = deque([root])
        while(queue):
            lvlSize = len(queue)
            lvlNodes = []
            for _ in range(lvlSize):
                node = queue.popleft()
                lvlNodes.append(node.val)
                if(node.left):
                    queue.append(node.left)
                if(node.right):
                    queue.append(node.right)
            res.append(lvlNodes)
        return res
