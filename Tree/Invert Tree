Problem : Given the root of a binary tree, invert the tree, and return its root.

Example 1:
Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]

Solution: We will use recursion. We will treat each node as root, flips its children & call invertTree method on each of the child to recursively do the same. It will take O(n) time for each node & O(h) space due to 
recursive stack where h is the height.
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if(root is None):
            return None
        root.left, root.right= root.right,root.left
        self.invertTree(root.right)
        self.invertTree(root.left)
        return root
