Problem: Given a collection of candidate numbers (candidates) and a target number (target), 
find all unique combinations in candidates where the candidate numbers sum to target.
Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Solution: Here we will sort the list to recognize duplicates. We will iterate through candidates, check if previous element is same as current element
to skip duplicates. If the current element- target is < < 0, means any element after the current element will also give same answer since the list is sorted.
So we break if the condition is satisfied. time complexity O(2^n) & space complexity O(n) recursion + O(# of valid combinations)

class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        res = []
        def backtrack(start,path,target):
            if(target == 0):
                res.append(path[:])
                return
            for i in range(start,len(candidates)):
                if(i>start and candidates[i] == candidates[i-1]):
                    continue
                if(target - candidates[i] < 0):
                    break
                path.append(candidates[i])
                backtrack(i+1,path,target-candidates[i])
                path.pop()
        backtrack(0,[],target)
        return res

        


