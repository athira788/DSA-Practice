Problem: Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers
sum to target. You may return the combinations in any order.
The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers
is different.The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.


Example 1:
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.

Solution: The sum is similar to subsets. Difference is we have to consider a element multiple time to reach a target. So we will consider 2 things, one we will
stop the target is less than 0 & two, we will add ietm of result list if target is equal to 0. So the main difference is implemented by giving the current index
to recursive call while in subset we were giving the next index. The time complexity is O(n^t) where n is candidate number & t is target/total value.

class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        res = []
        def backtracking(start,target,combination):
            if(target<0):
                return
            if(target == 0):
                res.append(combination[:])
            for i in range(start,len(candidates)):
                combination.append(candidates[i])
                backtracking(i,target - candidates[i],combination)
                combination.pop()
        backtracking(0,target,[])
        return res
