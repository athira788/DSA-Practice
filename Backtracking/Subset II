Problem: Given an integer array nums that may contain duplicates, return all possible subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Solution: Here we will be sorting the list to recognize duplicates. We will check if the number is greater than start & the value of current is equal to value of
previous element, then we skip the iteration. To use this we need to sort the list. time complexity O(n log n + n * 2^n).
class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()
        def backtrack(start,path):
            res.append(path[:])
            for i in range(start,len(nums)):
                if(i > start and nums[i] == nums[i-1]):
                    continue
                path.append(nums[i])
                backtrack(i+1,path)
                path.pop()

        backtrack(0,[])
        return res
