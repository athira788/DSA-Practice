Problem: Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Solution: Here we will be using used array to keep track of the elements in the current list. We will add each element to path, once the length matches the original
list, that will be th base case. We will ad dit to result & pop the element and look for the next option. Here the time complexity id O(n x n!) as we are creating n!
permutations of length n. To the contrary, susbet will have O(n x 2^n), because for 2^n subsets each with legngth upto n.

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        res = []
        used = [False]*len(nums)
        def backtrack(path,used):
          if(len(nums) == len(path)):
            res.append(path[:])
            return
          for i in range(len(nums)):
            if(used[i]):
              continue
            path.append(nums[i])
            used[i] = True
            backtrack(path,used)
            path.pop()
            used[i] = False
        return res
