Problem : Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:
Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.

Note:
A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:
Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true

Solution : we will create 3 hashset for keeping track of row , column & box elements. On iterating through the board , for each value we will vchekc its existance 
in the respective, row,col & box hash set. The box number is identified by formula: r/3*3+c/3 (floor division).

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        size = len(board)
        box = [set() for _ in range(size)]
        row = [set() for _ in range(size)]
        col = [set() for _ in range(size)]
        
        for r in range(size):
            for c in range(size):
                val = board[r][c] 
                if(val == '.' ):
                    continue
                if(val in row[r] or val in col[c] or val in box[r//3*3+c//3]):
                    return False
                row[r].add(val)
                col[c].add(val)
                box[r//3*3+c//3].add(val)
        return True
