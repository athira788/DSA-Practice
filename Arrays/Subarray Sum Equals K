Problem: Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.
A subarray is a contiguous non-empty sequence of elements within an array.

Example 1:
Input: nums = [1,1,1], k = 2
Output: 2

Solution:  Here we will use prefSum variable to keep cumulative sum till now. If the difference between prefSum and k can be found in hashMap(key = prefix Sum 
val = frequency or occurence)
class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        prefSum = 0
        count = 0
        hashMap = {0:1}
        for id,val in enumerate(nums):
            prefSum + = val
            if(prefSum - k in hashMap):
                count += hashMap[prefSum - k]
             hashMap[prefSum] = hashMap.get(prefSum,0) + 1
        return count
            
