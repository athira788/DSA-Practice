Problem. The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.
For example, for arr = [2,3,4], the median is 3.
For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.
Implement the MedianFinder class:
MedianFinder() initializes the MedianFinder object.
void addNum(int num) adds the integer num from the data stream to the data structure.
double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.
 
Example 1:
Input
["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]
[[], [1], [2], [], [3], []]
Output
[null, null, null, 1.5, null, 2.0]

Solution: We can use sorting & then return mea but that would cost us nlogn. Instead we will think of it as 2 sub-lists of 1 entire list where the left sublist will be maxHeap & right will be minHesp. 
We are using heap for its built in property of getting smallest & largest value. IF even, we will divide values from both list else retrun the max Hep as maxHeap will have 1 extra element.

class MedianFinder:
    import heapq
    def __init__(self):
        self.maxHeap = []
        self.minHeap = []

    def addNum(self, num: int) -> None:
        heapq.heappush(self.maxHeap, -num)
        heapq.heappush(self.minHeap, -heapq.heappop(self.maxHeap))
        if(len(self.maxHeap) < len(self.minHeap)):
            heapq.heappush(self.maxHeap, -heapq.heappop(self.minHeap))

    def findMedian(self) -> float:
        if(len(self.minHeap) == len(self.maxHeap)):
            return (-self.maxHeap[0]+self.minHeap[0])/2
        return -self.maxHeap[0]
        
