Problem: You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.
For example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever.
You will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.
Return the least number of buses you must take to travel from source to target. Return -1 if it is not possible.

Example 1:
Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6
Output: 2
Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.

Solution: We will explore level by level to find the shortest path from source to destination. So BFS is chosen. Here each elevel indicates the route/bus to a stop. So we create a dictionary of stops to routes/buses
2 sets - visited routes & visited stops for pruning bfs. Initally teh source is popped & the routes is extracted from dictionary. It is added to visitedRoute if not present else skipped. We then get all the stops
associated with that route from teh route input. check if these stops rae target else add them to visitedStops if not present.
from collections import deque,defaultdict
    def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:
        if source == target:
            return 0
        stpToRouteMap = defaultdict(list)
        for route,stops in enumerate(routes):
            for stop in stops:
                stpToRouteMap[stop].append(route)
        queue = deque([source])
        visitedRoute = set()
        visistedStop = {source}
        bus = 0
        while queue:
            bus+=1
            for _ in range(len(queue)):
                stop = queue.popleft()
                for route in stpToRouteMap[stop]:
                    if(route in visitedRoute):
                        continue
                    visitedRoute.add(route)
                    for nextStop in routes[route]:
                        if(nextStop == target):
                            return bus
                        if(nextStop not in visistedStop):
                            visistedStop.add(nextStop)
                            queue.append(nextStop)
        return -1
