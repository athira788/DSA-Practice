Problem: There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where 
prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.

Solution:
def canFinish(self, numCourses, prerequisites):
        adjList = defaultdict(list)
        state = [0]*numCourses
        for des,src in prerequisites:
            adjList[src].append(des)

        def dfs(course):
            if(state[course] == 1):
                return False
            if(state[course] == 2):
                return True

            state[course] = 1
            for val in adjList[course]:
                if (not dfs(val)):
                    return False
            
            state[course] = 2
            return True

        for i in range(numCourses):
            if(state[i] == 0):
                if(not dfs(i)):
                    return False
        return True
