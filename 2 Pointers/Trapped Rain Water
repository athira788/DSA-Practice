Problem: You are given an array of non-negative integers height which represent an elevation map. Each value height[i] represents the height of a bar, 
which has a width of 1. Return the maximum area of water that can be trapped between the bars.

Example 1:
Input: height = [0,2,0,3,1,0,1,3,2,1]
Output: 9

Solution: Time - O(n) & Space - O(1)
def trap(self, height: List[int]) -> int:
        if not height:
            return 0
        lMax, rMax = height[0],height[-1]
        left,right = 0, len(height)-1
        count = 0
        while(left<right):
            if(lMax<rMax):
                left+=1
                lMax = max(lMax,height[left])
                count+=lMax - height[left]
            else:
                right-=1
                rMax = max(rMax,height[right])
                count+=rMax - height[right]
        return count
