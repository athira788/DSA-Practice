Problem: Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].

Solution: Brute force - 3 for loops & iterating so O(n^3). Better approach using hashset (time  - O(n^2) & space  - O(k+n)). 
Best Approach using 2 pointer - keeping i constant & iterating like 2 sum.
Time - O(n^2) and space - O(k) auxillary space.
def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        res= []
        for i in range(0,len(nums)-2):
            if(nums[i-1] == nums[i] and i>0):
                continue
            left,right = i+1, len(nums)-1
            while(left<right):
                if(nums[left]+nums[right]+nums[i]<0):
                    left+=1
                elif(nums[left]+nums[right]+nums[i]>0):
                    right-=1
                else:
                    res.append([nums[i], nums[left], nums[right]])
                    left+=1
                    right-=1
                    while(nums[left] == nums[left-1] and left<right):
                        left+=1
                    while(nums[right] == nums[right+1] and left<right):
                        right-=1
        return res
